import streamlit as st  # Th∆∞ vi·ªán t·∫°o giao di·ªán web
from langchain_community.callbacks.streamlit import StreamlitCallbackHandler
from langchain_community.chat_message_histories import StreamlitChatMessageHistory
from agent_retrieve import get_agent_retrieve, get_retriever
from agent_llm import get_agent_llm

gemma2_9b = "gemma2:latest"
gemma2_2b = "gemma2:2b"
gemma2_2btool="cow/gemma2_tools:2b"
vistral = "ontocord/vistral:latest"
collections = ("product_personal", "product_corporate")


# C·∫•u h√¨nh trang web c∆° b·∫£n
def setup_page():
    st.set_page_config(
        page_title="AI Assistant HD Bank",  # Ti√™u ƒë·ªÅ tab tr√¨nh duy·ªát
        page_icon="üí¨",  # Icon tab
        layout="wide"  # Giao di·ªán r·ªông
    )


# H√†m thi·∫øt l·∫≠p sidebar
def setup_sidebar():
    st.sidebar.title("B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ c√°c s·∫£n ph·∫©m, d·ªãch v·ª• c·ªßa C√° nh√¢n hay Doanh nghi·ªáp ?")
    product_type = st.sidebar.selectbox("", ["--------------------------", "C√° nh√¢n",
                                             "Doanh Nghi·ªáp"])  # Kh√¥ng c√≥ l·ª±a ch·ªçn m·∫∑c ƒë·ªãnh
    if product_type == "C√° nh√¢n":
        collection_name = collections[0]
    else:
        collection_name = collections[1]
    return collection_name, product_type


def get_relevant_product(chat_history, agent_executor):
    prompt = chat_history[-1].get("content")
    response = agent_executor.invoke(
        {
            "input": prompt,
            "chat_history": chat_history
        }
    )
    return response["output"]


# H√†m x·ª≠ l√Ω ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng
def handle_user_input(msgs, agent_llm):
    if prompt := st.chat_input('T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n '):
        st.chat_message("user").write(prompt)
        st.session_state.messages.append({"role": "user", "content": prompt})
        msgs.add_user_message(prompt)
        # L·∫•y l·ªãch s·ª≠ chat
        chat_history = [
            {"role": msg["role"], "content": msg["content"]}
            for msg in st.session_state.messages
        ]
        with st.chat_message("assistant"):
            # st_callback = StreamlitCallbackHandler(st.container())
            output = ""
            placeholder = st.empty()
            for w in agent_llm.stream(chat_history):
                output += w.content
                placeholder.markdown(f"<p>{output} ‚ñê </p>", unsafe_allow_html=True)
            placeholder.markdown(f"<p>{output}</p>", unsafe_allow_html=True)
            # retriever = get_retriever(collection_name)
            # agent_executor = get_agent(retriever)
            # G·ªçi AI x·ª≠ l√Ω

            # print(response)
            # # L∆∞u v√† hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
            # output = response.content
            st.session_state.messages.append({"role": "assistant", "content": output})
            msgs.add_ai_message(output)


# H√†m ch√≠nh ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng
def main():
    # Hi·ªÉn th·ªã l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
    if product_type != "--------------------------":
        st.write(f"B·∫°n ƒë√£ ch·ªçn: **{product_type}**")
        st.write("**R·∫•t vui v√¨ b·∫°n ƒë√£ quan t√¢m ƒë·∫øn s·∫£n ph·∫©m c·ªßa HD Bank. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?**")
        # Hi·ªÉn th·ªã l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
        for msg in st.session_state.messages:
            role = "assistant" if msg["role"] == "assistant" else "user"
            st.chat_message(role).write(msg["content"])
        agent_llm = get_agent_llm(gemma2_2btool, 0.5)

        handle_user_input(msgs, agent_llm)  # G·ªçi h√†m x·ª≠ l√Ω ƒë·∫ßu v√†o


    else:
        st.write("Vui l√≤ng ch·ªçn lo·∫°i s·∫£n ph·∫©m, d·ªãch v·ª•.")


# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    setup_page()  # C·∫•u h√¨nh trang
    st.title("üí¨ AI Assistant HD Bank")  # Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
    collection_name, product_type = setup_sidebar()  # Thi·∫øt l·∫≠p sidebar v√† l·∫•y l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
    msgs = StreamlitChatMessageHistory(key="langchain_messages")

    # Kh·ªüi t·∫°o l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
    if "messages" not in st.session_state:
        st.session_state.messages = []
    main()
