import streamlit as st
import time
import logging
from datetime import datetime
from typing import Optional, Dict, Any
from langchain_core.messages import AIMessage, HumanMessage
import os
from pathlib import Path
from build_graph import GraphBuilder, build_graph


def setup_logging():
    """
    Thi·∫øt l·∫≠p h·ªá th·ªëng logging chi ti·∫øt ƒë·ªÉ theo d√µi lu·ªìng x·ª≠ l√Ω v√† debug.
    T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c logs v√† ƒë·∫∑t t√™n file theo ng√†y.
    """
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)

    # T·∫°o t√™n file log v·ªõi timestamp
    log_file = log_dir / f"chatbot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"

    # C·∫•u h√¨nh logging v·ªõi nhi·ªÅu m·ª©c ƒë·ªô chi ti·∫øt
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler(),
            logging.handlers.RotatingFileHandler(
                log_file,
                maxBytes=10485760,  # 10MB
                backupCount=5,
                encoding='utf-8'
            )
        ]
    )
    return logging.getLogger(__name__)


logger = setup_logging()


class HDBANKChatInterface:
    """
    Giao di·ªán chat th√¥ng minh cho HDBANK v·ªõi kh·∫£ nƒÉng x·ª≠ l√Ω ng·ªØ c·∫£nh
    v√† ph√¢n t√≠ch h·ªôi tho·∫°i n√¢ng cao.
    """

    def __init__(self):
        # Thi·∫øt l·∫≠p tin nh·∫Øn ch√†o m·ª´ng
        self.welcome_message = """
        üëã Xin ch√†o! T√¥i l√† Tr·ª£ l√Ω AI c·ªßa HDBank.

        T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
        ‚Ä¢ T∆∞ v·∫•n v·ªÅ s·∫£n ph·∫©m v√† d·ªãch v·ª• ng√¢n h√†ng
        ‚Ä¢ Cung c·∫•p th√¥ng tin v·ªÅ l√£i su·∫•t v√† bi·ªÉu ph√≠
        ‚Ä¢ Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ th·∫ª t√≠n d·ª•ng, t√†i kho·∫£n
        ‚Ä¢ H∆∞·ªõng d·∫´n c√°c th·ªß t·ª•c, quy tr√¨nh giao d·ªãch
        ‚Ä¢ C·∫≠p nh·∫≠t ∆∞u ƒë√£i v√† ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i m·ªõi

        H√£y ƒë·∫∑t c√¢u h·ªèi ho·∫∑c chia s·∫ª nhu c·∫ßu c·ªßa b·∫°n!
        """

        # Kh·ªüi t·∫°o giao di·ªán v√† tr·∫°ng th√°i
        self.configure_page()
        self.initialize_session_state()

        # Kh·ªüi t·∫°o GraphBuilder v·ªõi x·ª≠ l√Ω ng·ªØ c·∫£nh
        self.initialize_graph_builder()

    def configure_page(self):
        """C·∫•u h√¨nh giao di·ªán Streamlit v·ªõi style hi·ªán ƒë·∫°i v√† responsive"""
        st.set_page_config(
            page_title="HDBank AI Assistant",
            page_icon="üè¶",
            layout="wide",
            initial_sidebar_state="expanded"
        )

        # CSS t√πy ch·ªânh cho giao di·ªán
        st.markdown("""
        <style>
        /* Container ch√≠nh */
        .main {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        /* Style cho tin nh·∫Øn */
        .chat-message {
            padding: 1.5rem;
            border-radius: 0.8rem;
            margin: 1rem 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            animation: fadeIn 0.5s ease-out;
        }

        /* Tin nh·∫Øn ng∆∞·ªùi d√πng */
        .user-message {
            background-color: #e3f2fd;
            border-left: 4px solid #2196f3;
        }

        /* Tin nh·∫Øn assistant */
        .assistant-message {
            background-color: #f5f5f5;
            border-left: 4px solid #9e9e9e;
        }

        /* Hi·ªáu ·ª©ng loading */
        .stSpinner {
            text-align: center;
            padding: 2rem;
        }

        /* Animation cho tin nh·∫Øn m·ªõi */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .chat-message {
                padding: 1rem;
                margin: 0.5rem 0;
            }
        }
        </style>
        """, unsafe_allow_html=True)

    def initialize_session_state(self):
        """
        Kh·ªüi t·∫°o v√† qu·∫£n l√Ω tr·∫°ng th√°i phi√™n l√†m vi·ªác.
        Theo d√µi l·ªãch s·ª≠ h·ªôi tho·∫°i v√† th√¥ng tin ng·ªØ c·∫£nh.
        """
        if "messages" not in st.session_state:
            st.session_state.messages = [{
                "role": "assistant",
                "content": self.welcome_message
            }]

        if "conversation_context" not in st.session_state:
            st.session_state.conversation_context = {
                "current_topic": None,
                "last_product_query": None,
                "interaction_count": 0,
                "context_history": []
            }

        if "graph_builder" not in st.session_state:
            try:
                st.session_state.graph_builder = GraphBuilder()
                st.session_state.graph = st.session_state.graph_builder.build()
                logger.info("Kh·ªüi t·∫°o graph th√†nh c√¥ng")
            except Exception as e:
                logger.error(f"L·ªói kh·ªüi t·∫°o graph: {str(e)}")
                st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o h·ªá th·ªëng chat. Vui l√≤ng th·ª≠ l·∫°i sau.")

    def initialize_graph_builder(self):
        """
        Kh·ªüi t·∫°o GraphBuilder v·ªõi c√°c t√≠nh nƒÉng x·ª≠ l√Ω ng·ªØ c·∫£nh.
        C·∫•u h√¨nh c√°c th√†nh ph·∫ßn v√† tham s·ªë cho h·ªá th·ªëng multi-agent.
        """
        try:
            if "graph_builder" not in st.session_state:
                graph_builder = GraphBuilder()
                st.session_state.graph = graph_builder.build()
                st.session_state.graph_builder = graph_builder
                logger.info("Kh·ªüi t·∫°o GraphBuilder th√†nh c√¥ng")
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o GraphBuilder: {str(e)}")
            st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i.")

    def update_conversation_context(self, user_input: str, response: str):
        """
        C·∫≠p nh·∫≠t ng·ªØ c·∫£nh h·ªôi tho·∫°i d·ª±a tr√™n t∆∞∆°ng t√°c m·ªõi.
        Ph√¢n t√≠ch v√† l∆∞u tr·ªØ th√¥ng tin ng·ªØ c·∫£nh quan tr·ªçng.
        """
        context = st.session_state.conversation_context
        context["interaction_count"] += 1

        # Th√™m t∆∞∆°ng t√°c m·ªõi v√†o l·ªãch s·ª≠
        context["context_history"].append({
            "timestamp": datetime.now().isoformat(),
            "user_input": user_input,
            "response": response,
            "interaction_number": context["interaction_count"]
        })

        # Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc l·ªãch s·ª≠
        max_history = 10
        if len(context["context_history"]) > max_history:
            context["context_history"] = context["context_history"][-max_history:]

    def process_message(self, user_input: str) -> Optional[str]:
        """
        X·ª≠ l√Ω tin nh·∫Øn ng∆∞·ªùi d√πng th√¥ng qua h·ªá th·ªëng multi-agent c√≥ ng·ªØ c·∫£nh.

        Args:
            user_input: C√¢u h·ªèi ho·∫∑c y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng

        Returns:
            Optional[str]: C√¢u tr·∫£ l·ªùi t·ª´ h·ªá th·ªëng
        """
        try:
            if not hasattr(st.session_state, "graph"):
                logger.error("Graph ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
                return "Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau."

            # L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i t·ª´ session state
            conversation_history = [
                msg for msg in st.session_state.messages
                if msg["role"] in ["user", "assistant"]
            ]

            # Chuy·ªÉn ƒë·ªïi format tin nh·∫Øn
            formatted_history = []
            for msg in conversation_history:
                if msg["role"] == "user":
                    formatted_history.append(HumanMessage(content=msg["content"]))
                else:
                    formatted_history.append(AIMessage(content=msg["content"]))

            # Chu·∫©n b·ªã state v·ªõi ƒë·∫ßy ƒë·ªß ng·ªØ c·∫£nh
            state = {
                "messages": [HumanMessage(content=user_input)],
                "conversation_history": formatted_history,
                "context_metadata": {
                    "timestamp": datetime.now().isoformat(),
                    "session_id": st.session_state.session_info["session_id"],
                    "interaction_count": st.session_state.session_info["user_interactions"]
                }
            }

            # X·ª≠ l√Ω qua graph
            response_content = None
            with st.spinner("ü§î ƒêang x·ª≠ l√Ω..."):
                for step in st.session_state.graph.stream(state):
                    if isinstance(step, dict):
                        current_node = next(iter(step.keys()))
                        logger.info(f"ƒêang x·ª≠ l√Ω t·∫°i node: {current_node}")

                    response = self._get_last_response(step)
                    if response and response.content.strip():
                        response_content = response.content
                        logger.info(f"Nh·∫≠n ph·∫£n h·ªìi t·ª´ {current_node}")
                        break

            # C·∫≠p nh·∫≠t ng·ªØ c·∫£nh v·ªõi t∆∞∆°ng t√°c m·ªõi
            if response_content:
                st.session_state.session_info["user_interactions"] += 1
                self.update_conversation_context(user_input, response_content)

            return response_content or "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y."

        except Exception as e:
            logger.error(f"L·ªói x·ª≠ l√Ω tin nh·∫Øn: {str(e)}")
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i."

    def run(self):
        """Ch·∫°y giao di·ªán chat ch√≠nh v·ªõi x·ª≠ l√Ω ng·ªØ c·∫£nh v√† ƒëa t√°c t·ª≠"""
        st.title("üè¶ HDBank AI Assistant")

        # Hi·ªÉn th·ªã th√¥ng tin ng·ªØ c·∫£nh trong sidebar
        with st.sidebar:
            st.title("üè¶ HDBank Assistant")
            st.markdown("---")

            # Hi·ªÉn th·ªã th·ªëng k√™ h·ªôi tho·∫°i
            st.markdown("### Th·ªëng k√™ cu·ªôc h·ªôi tho·∫°i")
            context = st.session_state.conversation_context
            st.write(f"S·ªë l∆∞·ª£ng t∆∞∆°ng t√°c: {context['interaction_count']}")
            if context['last_product_query']:
                st.write("Ch·ªß ƒë·ªÅ g·∫ßn ƒë√¢y nh·∫•t v·ªÅ s·∫£n ph·∫©m:")
                st.write(context['last_product_query'])

            # N√∫t x√≥a l·ªãch s·ª≠
            if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ chat"):
                st.session_state.messages = [{
                    "role": "assistant",
                    "content": self.welcome_message
                }]
                st.session_state.conversation_context = {
                    "current_topic": None,
                    "last_product_query": None,
                    "interaction_count": 0,
                    "context_history": []
                }
                st.rerun()

            st.markdown("---")
            st.markdown("### Th√¥ng tin")
            st.markdown("AI Assistant phi√™n b·∫£n 1.0")
            st.markdown("¬© 2024 Hackathon HDBank. All rights reserved.")

        # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])

        # X·ª≠ l√Ω input t·ª´ ng∆∞·ªùi d√πng
        if user_input := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
            # C·∫≠p nh·∫≠t UI v·ªõi tin nh·∫Øn ng∆∞·ªùi d√πng
            st.session_state.messages.append({"role": "user", "content": user_input})
            with st.chat_message("user"):
                st.markdown(user_input)

            # X·ª≠ l√Ω v√† hi·ªÉn th·ªã ph·∫£n h·ªìi
            with st.chat_message("assistant"):
                response = self.process_message(user_input)

                if response:
                    # Hi·ªÉn th·ªã ph·∫£n h·ªìi v·ªõi animation
                    message_placeholder = st.empty()
                    full_response = self.stream_response(response, message_placeholder)

                    # C·∫≠p nh·∫≠t l·ªãch s·ª≠
                    st.session_state.messages.append({
                        "role": "assistant",
                        "content": full_response
                    })
                else:
                    st.error("Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y.")

    def stream_response(self, response: str, placeholder):
        """
        Hi·ªÉn th·ªã ph·∫£n h·ªìi v·ªõi hi·ªáu ·ª©ng ƒë√°nh m√°y t·ª± nhi√™n.

        Args:
            response: N·ªôi dung ph·∫£n h·ªìi c·∫ßn hi·ªÉn th·ªã
            placeholder: Streamlit placeholder ƒë·ªÉ c·∫≠p nh·∫≠t n·ªôi dung
        """
        try:
            # Kh·ªüi t·∫°o buffer cho n·ªôi dung ho√†n ch·ªânh
            full_response = []

            # T√°ch response th√†nh c√°c d√≤ng
            lines = response.strip().split('\n')

            for line in lines:
                # T√°ch d√≤ng th√†nh c√°c t·ª´
                words = line.split()
                line_buffer = []

                for word in words:
                    # Th√™m t·ª´ v√†o buffer c·ªßa d√≤ng hi·ªán t·∫°i
                    line_buffer.append(word)

                    # Hi·ªÉn th·ªã d√≤ng hi·ªán t·∫°i v√† c√°c d√≤ng tr∆∞·ªõc ƒë√≥
                    current_response = '\n'.join(full_response + [' '.join(line_buffer) + " ‚ñå"])
                    placeholder.markdown(current_response)
                    time.sleep(0.05)

                # Khi ho√†n th√†nh m·ªôt d√≤ng, th√™m v√†o buffer t·ªïng
                full_response.append(' '.join(line_buffer))

            # Hi·ªÉn th·ªã ph·∫£n h·ªìi ho√†n ch·ªânh cu·ªëi c√πng
            final_response = '\n'.join(full_response)
            placeholder.markdown(final_response)
            return final_response

        except Exception as e:
            logger.error(f"L·ªói hi·ªÉn th·ªã response: {str(e)}")
            placeholder.markdown(response)
            return response

        except Exception as e:
            logger.error(f"L·ªói hi·ªÉn th·ªã response: {str(e)}")
            placeholder.markdown(response)
            return response


    def _get_last_response(self, step: Dict[str, Any]) -> Optional[AIMessage]:
        """
        Tr√≠ch xu·∫•t ph·∫£n h·ªìi cu·ªëi c√πng t·ª´ b∆∞·ªõc x·ª≠ l√Ω c·ªßa graph.

        Args:
            step: B∆∞·ªõc x·ª≠ l√Ω hi·ªán t·∫°i t·ª´ graph

        Returns:
            Optional[AIMessage]: Message cu·ªëi c√πng t·ª´ agent ho·∫∑c None
        """
        try:
            if isinstance(step, dict):
                for value in step.values():
                    if isinstance(value, dict) and "messages" in value:
                        messages = value["messages"]
                        if messages and isinstance(messages[-1], AIMessage):
                            return messages[-1]
            return None

        except Exception as e:
            logger.error(f"L·ªói khi l·∫•y response: {str(e)}")
            return None


    def _handle_special_commands(self, user_input: str) -> bool:
        """
        X·ª≠ l√Ω c√°c l·ªánh ƒë·∫∑c bi·ªát t·ª´ ng∆∞·ªùi d√πng.

        Args:
            user_input: C√¢u l·ªánh t·ª´ ng∆∞·ªùi d√πng

        Returns:
            bool: True n·∫øu l√† l·ªánh ƒë·∫∑c bi·ªát v√† ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
        """
        try:
            # X·ª≠ l√Ω l·ªánh clear
            if user_input.lower() in ['/clear', 'clear', 'x√≥a']:
                self._clear_chat_history()
                return True

            # X·ª≠ l√Ω l·ªánh help
            if user_input.lower() in ['/help', 'help', 'tr·ª£ gi√∫p']:
                self._show_help()
                return True

            # X·ª≠ l√Ω l·ªánh export
            if user_input.lower().startswith('/export'):
                self._export_chat_history()
                return True

            return False

        except Exception as e:
            logger.error(f"L·ªói x·ª≠ l√Ω l·ªánh ƒë·∫∑c bi·ªát: {str(e)}")
            return False


    def _clear_chat_history(self):
        """X√≥a l·ªãch s·ª≠ chat v√† kh·ªüi t·∫°o l·∫°i tr·∫°ng th√°i"""
        try:
            st.session_state.messages = [{
                "role": "assistant",
                "content": self.welcome_message
            }]
            st.session_state.conversation_context = {
                "current_topic": None,
                "last_product_query": None,
                "interaction_count": 0,
                "context_history": []
            }
            st.rerun()

        except Exception as e:
            logger.error(f"L·ªói khi x√≥a l·ªãch s·ª≠: {str(e)}")
            st.error("Kh√¥ng th·ªÉ x√≥a l·ªãch s·ª≠ chat. Vui l√≤ng th·ª≠ l·∫°i.")


    def _show_help(self):
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng chatbot"""
        help_message = """
            üîç H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng HDBank AI Assistant:
    
            C√°c l·ªánh ƒë·∫∑c bi·ªát:
            ‚Ä¢ /clear: X√≥a l·ªãch s·ª≠ chat
            ‚Ä¢ /help: Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y
            ‚Ä¢ /export: Xu·∫•t l·ªãch s·ª≠ chat
    
            C√°c lo·∫°i c√¢u h·ªèi:
            ‚Ä¢ Th√¥ng tin s·∫£n ph·∫©m (th·∫ª, vay, ti·∫øt ki·ªám...)
            ‚Ä¢ L√£i su·∫•t v√† bi·ªÉu ph√≠
            ‚Ä¢ Th·ªß t·ª•c, quy tr√¨nh giao d·ªãch
            ‚Ä¢ ∆Øu ƒë√£i v√† khuy·∫øn m√£i
            ‚Ä¢ C√°c c√¢u h·ªèi chung v·ªÅ HDBank
    
            Tips s·ª≠ d·ª•ng hi·ªáu qu·∫£:
            ‚Ä¢ ƒê·∫∑t c√¢u h·ªèi r√µ r√†ng, c·ª• th·ªÉ
            ‚Ä¢ Cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin c·∫ßn thi·∫øt
            ‚Ä¢ Ki√™n nh·∫´n ch·ªù h·ªá th·ªëng x·ª≠ l√Ω
            """
        st.info(help_message)


    def _export_chat_history(self):
        """Xu·∫•t l·ªãch s·ª≠ chat ra file"""
        try:
            # T·∫°o n·ªôi dung xu·∫•t
            export_content = []
            for msg in st.session_state.messages:
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                export_content.append(f"{timestamp} - {msg['role']}: {msg['content']}")

            # T·∫°o file
            filename = f"chat_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write('\n\n'.join(export_content))

            # Th√¥ng b√°o th√†nh c√¥ng
            st.success(f"ƒê√£ xu·∫•t l·ªãch s·ª≠ chat v√†o file {filename}")

        except Exception as e:
            logger.error(f"L·ªói khi xu·∫•t l·ªãch s·ª≠: {str(e)}")
            st.error("Kh√¥ng th·ªÉ xu·∫•t l·ªãch s·ª≠ chat. Vui l√≤ng th·ª≠ l·∫°i.")
def main():
    """
    H√†m main kh·ªüi ch·∫°y ·ª©ng d·ª•ng v·ªõi x·ª≠ l√Ω l·ªói to√†n di·ªán
    v√† logging chi ti·∫øt.
    """
    try:
        # Thi·∫øt l·∫≠p logging chi ti·∫øt cho m√¥i tr∆∞·ªùng production
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler('app.log'),
                logging.handlers.RotatingFileHandler(
                    'app_rotating.log',
                    maxBytes=10485760,  # 10MB
                    backupCount=5
                )
            ]
        )

        # Kh·ªüi t·∫°o v√† ch·∫°y giao di·ªán chat
        chat_interface = HDBANKChatInterface()

        # Th√™m th√¥ng tin phi√™n l√†m vi·ªác
        st.session_state.session_info = {
            "start_time": datetime.now(),
            "session_id": str(hash(datetime.now())),
            "user_interactions": 0
        }

        # Ch·∫°y giao di·ªán ch√≠nh
        chat_interface.run()

    except Exception as e:
        logger.error(f"L·ªói kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {str(e)}", exc_info=True)
        st.error("C√≥ l·ªói x·∫£y ra khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng. Vui l√≤ng t·∫£i l·∫°i trang.")

    finally:
        # ƒê·∫£m b·∫£o log phi√™n l√†m vi·ªác ƒë∆∞·ª£c l∆∞u
        if hasattr(st.session_state, 'session_info'):
            logger.info(f"K·∫øt th√∫c phi√™n l√†m vi·ªác {st.session_state.session_info['session_id']}")





if __name__ == "__main__":
    main()